{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n// Hook\nconst UseWindowSize = () => {\n  _s();\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (typeof window !== \"undefined\") {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      }\n\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n};\n_s(UseWindowSize, \"pQgmKdk3G7ZD8siv4XDMXsT+NXo=\");\n_c = UseWindowSize;\nexport default UseWindowSize;\nvar _c;\n$RefreshReg$(_c, \"UseWindowSize\");","map":{"version":3,"names":["useState","useEffect","UseWindowSize","windowSize","setWindowSize","width","undefined","height","window","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener"],"sources":["D:/project docs/k-mart-v2/k-mart-v2/front-end/src/Components/UseWindowSize.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n// Hook\r\nconst UseWindowSize = () => {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: undefined,\r\n        height: undefined\r\n    });\r\n\r\n    useEffect(() => {\r\n        // only execute all the code below in client side\r\n        if (typeof window !== \"undefined\") {\r\n            // Handler to call on window resize\r\n            function handleResize() {\r\n                // Set window width/height to state\r\n                setWindowSize({\r\n                    width: window.innerWidth,\r\n                    height: window.innerHeight\r\n                });\r\n            }\r\n\r\n            // Add event listener\r\n            window.addEventListener(\"resize\", handleResize);\r\n\r\n            // Call handler right away so state gets updated with initial window size\r\n            handleResize();\r\n\r\n            // Remove event listener on cleanup\r\n            return () => window.removeEventListener(\"resize\", handleResize);\r\n        }\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n};\r\nexport default UseWindowSize;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,aAAa,GAAG,MAAM;EAAA;EACxB;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC;IACzCK,KAAK,EAAEC,SAAS;IAChBC,MAAM,EAAED;EACZ,CAAC,CAAC;EAEFL,SAAS,CAAC,MAAM;IACZ;IACA,IAAI,OAAOO,MAAM,KAAK,WAAW,EAAE;MAC/B;MACA,SAASC,YAAY,GAAG;QACpB;QACAL,aAAa,CAAC;UACVC,KAAK,EAAEG,MAAM,CAACE,UAAU;UACxBH,MAAM,EAAEC,MAAM,CAACG;QACnB,CAAC,CAAC;MACN;;MAEA;MACAH,MAAM,CAACI,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;;MAE/C;MACAA,YAAY,EAAE;;MAEd;MACA,OAAO,MAAMD,MAAM,CAACK,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IACnE;EACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACR,OAAON,UAAU;AACrB,CAAC;AAAC,GA/BID,aAAa;AAAA,KAAbA,aAAa;AAgCnB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}